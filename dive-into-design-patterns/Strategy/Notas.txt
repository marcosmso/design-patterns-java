Strategy is a behavioral design pattern that lets you define a
family of algorithms, put each of them into a separate class,
and make their objects interchangeable.

The Strategy pattern suggests that you take a class that does
something specific in a lot of different ways and extract all of
these algorithms into separate classes called strategies.

The original class, called context, must have a field for storing
a reference to one of the strategies. The context delegates
the work to a linked strategy object instead of executing it on
its own.

Use the Strategy pattern when you want to use different variants
of an algorithm within an object and be able to switch
from one algorithm to another during runtime.
Use the Strategy when you have a lot of similar classes that
only differ in the way they execute some behavior.
The